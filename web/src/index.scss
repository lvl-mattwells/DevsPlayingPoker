@use "sass:meta";
@layer reset, base, rules, default;

@layer reset {
	// https://github.com/sass/sass/issues/3240
	@include meta.load-css("@unocss/reset/tailwind-compat.css");
}

@mixin color-layers($name, $hue, $saturation, $lightness, $adjustment: 5) {
	--#{$name}: #{$hue}, #{$saturation}, #{$lightness};
	--#{$name}-lighter: #{$hue}, #{$saturation}, #{$lightness + $adjustment};
	--#{$name}-darker: #{$hue}, #{$saturation}, #{$lightness - $adjustment};
}

@layer base {
	:root {
		@include color-layers("orange", 22, 89%, 61%, 10);
		--reddish: 12, 78%, 49%;
		--turquoise: 159, 99%, 73%;
		--neutral: 0, 0%, 20%;
		@include color-layers("whitish", 197, 24%, 94%);
		@include color-layers("navy", 235, 21%, 21%);
	}

	body {
		--at-apply: "bg-brand-whitish text-brand-navy p-4 dark:(bg-brand-navy text-brand-whitish)";
	}

	html {
		font-family: "Segoe UI", "Roboto", -apple-system, BlinkMacSystemFont,
			"Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans",
			"Helvetica Neue", sans-serif;

		// solid-toast uses inline styles ðŸ™„
		.toast-overrides {
			background-color: hsl(var(--navy)) !important;
			color: hsl(var(--whitish)) !important;

			& [role="status"] {
				// the default is flex which removes spaces for formatted elements
				display: block !important;
			}
		}

		&.dark {
			color-scheme: dark;

			// solid-toast uses inline styles ðŸ™„
			.toast-overrides {
				background-color: hsl(var(--whitish)) !important;
				color: hsl(var(--navy)) !important;
			}
		}
	}

	* {
		margin: 0;
		padding: 0;
		font-size: 100%;
	}

	select {
		--at-apply: "select";
	}

	input[type="text"],
	input[type="date"],
	input[type="number"] {
		--at-apply: "input";
	}

	input[type="checkbox"] {
		--at-apply: "checkbox";
	}

	input[type="radio"] {
		--at-apply: "radio";
	}

	hr {
		--at-apply: "border-color";
	}

	/**
   * Creates two keyframes that are reciprocals of one another.
   * Example: prefix: slide, from: (opacity: 0), to: (opacity: 1)
   *   @keyframes slide-in { from: { opacity: 0; } to: { opacity: 1 } }
   *   @keyframes slide-out { from: { opacity: 1; } to: { opacity: 0 } }
   */
	@mixin in-and-out($prefix, $from, $to) {
		@keyframes #{$prefix}-in {
			from {
				@each $property, $value in $from {
					#{$property}: $value;
				}
			}
			to {
				@each $property, $value in $to {
					#{$property}: $value;
				}
			}
		}

		@keyframes #{$prefix}-out {
			from {
				@each $property, $value in $to {
					#{$property}: $value;
				}
			}
			to {
				@each $property, $value in $from {
					#{$property}: $value;
				}
			}
		}
	}

	@include in-and-out(
		"fade",
		(
			opacity: 0,
		),
		(
			opacity: 1,
		)
	);

	@include in-and-out(
		"pop",
		(
			transform: scale(0.95),
			opacity: 0,
			display: none,
		),
		(
			transform: scale(1),
			opacity: 1,
			display: block,
		)
	);

	@include in-and-out(
		"slide",
		(
			transform: translateX(100%),
			display: none,
		),
		(
			transform: translateX(0%),
			display: block,
		)
	);

	dialog {
		&.drawer {
			animation: slide-out 150ms ease-in-out;

			&::backdrop {
				animation: fade-out 150ms ease-in-out;
			}

			&[open] {
				animation: slide-in 150ms ease-in-out;

				&::backdrop {
					animation: fade-in 150ms ease-in-out;
				}
			}
		}

		&.modal {
			animation: pop-out 150ms ease-in-out;

			&::backdrop {
				animation: fade-out 150ms ease-in-out;
			}

			&[open] {
				animation: pop-in 150ms ease-in-out;

				&::backdrop {
					animation: fade-in 150ms ease-in-out;
				}
			}
		}
	}
}
